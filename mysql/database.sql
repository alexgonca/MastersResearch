DROP TABLE IF EXISTS `test`.`mediacloud_sentence`;
DROP TABLE IF EXISTS `test`.`mediacloud`;
DROP TABLE IF EXISTS `test`.`google`;
DROP TABLE IF EXISTS `test`.`wordfrequency`;
DROP TABLE IF EXISTS `test`.`wordfrequency_query`;
DROP TABLE IF EXISTS `test`.`stopword`;
DROP function IF EXISTS `test`.`eliminate_quotes`;

CREATE TABLE `test`.`mediacloud` (
  # MediaCloud fields:
  `stories_id` VARCHAR(10) NOT NULL,
  `media_id` MEDIUMINT NULL,
  `full_text_rss` SMALLINT NULL,
  `description` TEXT NULL,
  `language` VARCHAR(10) NULL,
  `url` VARCHAR(500) NULL,
  `title` VARCHAR(300) NULL,
  `processed_stories_id` VARCHAR(10) NULL,
  `publish_date` DATETIME NULL,
  `guid` VARCHAR(300) NULL,
  `db_row_last_updated` DATETIME NULL,
  `is_fully_extracted` SMALLINT NULL,
  `collect_date` DATETIME NULL,
  `story_text` TEXT NULL,
  # Facebook fields:
  `facebook_url` VARCHAR(500) NULL,
  `normalized_url` VARCHAR(500) NULL,
  `click_count` INT UNSIGNED NULL,
  `comment_count` INT UNSIGNED NULL,
  `comments_fbid` VARCHAR(45) NULL,
  `commentsbox_count` INT UNSIGNED NULL,
  `like_count` INT UNSIGNED NULL,
  `share_count` INT UNSIGNED NULL,
  `total_count` INT NULL,
  # Customized fields:
  `aggregate` VARCHAR(10) NULL,
  `active` TINYINT NULL DEFAULT 1,
  `comment` VARCHAR(100) NULL,
  PRIMARY KEY (`stories_id`));

CREATE TABLE `test`.`mediacloud_sentence` (
  `story_sentences_id` VARCHAR(15) NOT NULL,
  `sentence` TEXT NULL,
  `sentence_number` INT NULL,
  `stories_id` VARCHAR(10) NULL,
  PRIMARY KEY (`story_sentences_id`),
  INDEX `fk_mediacloud_sentence_1_idx` (`stories_id` ASC),
  CONSTRAINT `fk_mediacloud_sentence_1`
    FOREIGN KEY (`stories_id`)
    REFERENCES `test`.`mediacloud` (`stories_id`)
    ON DELETE CASCADE
    ON UPDATE NO ACTION);

CREATE TABLE `test`.`google` (
  `id` INT NOT NULL AUTO_INCREMENT,
  # Google data:
  `url` VARCHAR(500) NULL,
  `title` VARCHAR(150) NULL,
  `blurb` VARCHAR(300) NULL,
  `ranking` INT NULL,
  `date` DATE NULL,
  `query` VARCHAR(200),
  # Facebook fields:
  `facebook_url` VARCHAR(500) NULL,
  `normalized_url` VARCHAR(500) NULL,
  `click_count` INT UNSIGNED NULL,
  `comment_count` INT UNSIGNED NULL,
  `comments_fbid` VARCHAR(45) NULL,
  `commentsbox_count` INT UNSIGNED NULL,
  `like_count` INT UNSIGNED NULL,
  `share_count` INT UNSIGNED NULL,
  `total_count` INT NULL,
  # Customized fields:
  `aggregate` VARCHAR(10) NULL,
  `active` TINYINT NULL DEFAULT 0,
  `comment` VARCHAR(100) NULL,
  PRIMARY KEY (`id`));

CREATE TABLE `test`.`wordfrequency_query` (
  `label` VARCHAR(45) NOT NULL,
  `initial_date` DATE NULL,
  `final_date` DATE NULL,
  `include_repeats` TINYINT NULL,
  `include_complete_text` TINYINT NULL,
  PRIMARY KEY (`label`));

CREATE TABLE `test`.`wordfrequency` (
  `label` VARCHAR(45) NULL,
  `word` VARCHAR(100) NULL,
  `frequency` INT NULL,
  INDEX `fk_wordfrequency_1_idx` (`label` ASC),
  CONSTRAINT `fk_wordfrequency_1`
    FOREIGN KEY (`label`)
    REFERENCES `test`.`wordfrequency_query` (`label`)
    ON DELETE CASCADE
    ON UPDATE CASCADE);

CREATE TABLE `test`.`stopword` (
  `word` VARCHAR(100) NOT NULL,
  `max_grams` TINYINT NULL,
  PRIMARY KEY (`word`))
DEFAULT CHARACTER SET = utf8
COLLATE = utf8_bin;

insert into stopword (word, max_grams) values
("de", 2),
("a", 100),
("o", 100),
("que", 100),
("e", 100),
("do", 2),
("da", 2),
("em", 100),
("um", 100),
("para", 100),
("com", 100),
("não", 100),
("uma", 100),
("os", 100),
("no", 100),
("se", 100),
("na", 100),
("por", 100),
("mais", 100),
("as", 100),
("dos", 2),
("como", 100),
("mas", 100),
("ao", 100),
("ele", 100),
("das", 2),
("à", 100),
("seu", 100),
("sua", 100),
("ou", 100),
("quando", 100),
("muito", 100),
("nos", 100),
("já", 100),
("eu", 100),
("também", 100),
("só", 100),
("pelo", 100),
("pela", 100),
("até", 100),
("isso", 100),
("ela", 100),
("entre", 100),
("depois", 100),
("sem", 100),
("mesmo", 100),
("aos", 100),
("seus", 100),
("quem", 100),
("nas", 100),
("me", 100),
("esse", 100),
("eles", 100),
("você", 100),
("essa", 100),
("num", 100),
("nem", 100),
("suas", 100),
("meu", 100),
("às", 100),
("minha", 100),
("numa", 100),
("pelos", 100),
("elas", 100),
("qual", 100),
("nós", 100),
("lhe", 100),
("deles", 100),
("essas", 100),
("esses", 100),
("pelas", 100),
("este", 100),
("dele", 100),
("tu", 100),
("te", 100),
("vocês", 100),
("vos", 100),
("lhes", 100),
("meus", 100),
("minhas", 100),
("teu", 100),
("tua", 100),
("teus", 100),
("tuas", 100),
("nosso", 100),
("nossa", 100),
("nossos", 100),
("nossas", 100),
("dela", 100),
("delas", 100),
("esta", 100),
("estes", 100),
("estas", 100),
("aquele", 100),
("aquela", 100),
("aqueles", 100),
("aquelas", 100),
("isto", 100),
("aquilo", 100),
("estou", 100),
("está", 100),
("estamos", 100),
("estão", 100),
("estive", 100),
("esteve", 100),
("estivemos", 100),
("estiveram", 100),
("estava", 100),
("estávamos", 100),
("estavam", 100),
("estivera", 100),
("estivéramos", 100),
("esteja", 100),
("estejamos", 100),
("estejam", 100),
("estivesse", 100),
("estivéssemos", 100),
("estivessem", 100),
("estiver", 100),
("estivermos", 100),
("estiverem", 100),
("hei", 100),
("há", 100),
("havemos", 100),
("hão", 100),
("houve", 100),
("houvemos", 100),
("houveram", 100),
("houvera", 100),
("houvéramos", 100),
("haja", 100),
("hajamos", 100),
("hajam", 100),
("houvesse", 100),
("houvéssemos", 100),
("houvessem", 100),
("houver", 100),
("houvermos", 100),
("houverem", 100),
("houverei", 100),
("houverá", 100),
("houveremos", 100),
("houverão", 100),
("houveria", 100),
("houveríamos", 100),
("houveriam", 100),
("sou", 100),
("somos", 100),
("são", 1),
("é", 100),
("era", 100),
("éramos", 100),
("eram", 100),
("fui", 100),
("foi", 100),
("fomos", 100),
("foram", 100),
("fora", 100),
("fôramos", 100),
("seja", 100),
("sejamos", 100),
("sejam", 100),
("fosse", 100),
("fôssemos", 100),
("fossem", 100),
("for", 100),
("formos", 100),
("forem", 100),
("serei", 100),
("será", 100),
("seremos", 100),
("serão", 100),
("seria", 100),
("seríamos", 100),
("seriam", 100),
("tenho", 100),
("tem", 100),
("temos", 100),
("tém", 100),
("tinha", 100),
("tínhamos", 100),
("tinham", 100),
("tive", 100),
("teve", 100),
("tivemos", 100),
("tiveram", 100),
("tivera", 100),
("tivéramos", 100),
("tenha", 100),
("tenhamos", 100),
("tenham", 100),
("tivesse", 100),
("tivéssemos", 100),
("tivessem", 100),
("tiver", 100),
("tivermos", 100),
("tiverem", 100),
("terei", 100),
("terá", 100),
("teremos", 100),
("terão", 100),
("teria", 100),
("teríamos", 100),
("teriam", 100),
("###", 100);

create function eliminate_quotes (s text) returns text
	return replace(replace(replace(replace(replace(replace(replace(replace(replace(s, '"', ''), "'", ""),
				'“', ''), '”', ''), '&#8220;', ''), '&#8221;', ''), '&#8216;', ''), '&#8217;', ''),
				'&quot;', '');